generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["pfmv", "data-deploiement"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("pfmv")
}

model User {
  id                           String                    @id @default(cuid())
  email                        String                    @unique
  emailVerified                DateTime?
  image                        String?
  accounts                     Account[]
  agentconnect_info            Json?
  nom                          String?
  prenom                       String?
  poste                        String?
  nom_etablissement            String?
  siren_info                   Json?
  created_at                   DateTime                  @default(now())
  updated_at                   DateTime?                 @updatedAt
  collectivites_created        collectivite[]            @relation(name: "collectivite_creator")
  projets_created              projet[]
  estimations_created          estimation[]              @relation(name: "estimation_creator")
  estimations_deleted          estimation[]              @relation(name: "estimation_deleter")
  projets_deleted              projet[]                  @relation(name: "projet_deleter")
  collectivites                user_collectivite[]       @relation(name: "collectivite_belonging")
  projets                      user_projet[]             @relation(name: "projet_access")
  canal_acquisition            String?
  user_projet_deleted          user_projet[]             @relation(name: "user_projet_deleter")
  discardedInformation         String[]
  conversations                conversation[]
  Analytics                    Analytics[]
  sourcing_contacts_created    projet_sourcing_contact[]
  accept_communication_produit Boolean                   @default(true)
  emails                       email[]
  estimations_aides            estimations_aides[]
  fiches                       projet_fiche[]
  diagnostic_simulation        diagnostic_simulation[]

  @@schema("pfmv")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("pfmv")
}

model collectivite {
  id                             Int                 @id
  nom                            String
  code_insee                     String?             @unique
  code_postal                    String?
  adresse_info                   Json?
  adresse_all_infos              Json?
  ban_id                         String?             @unique
  latitude                       Float?
  longitude                      Float?
  users                          user_collectivite[] @relation(name: "users_in_collectivite")
  created_by                     String
  creator                        User                @relation(name: "collectivite_creator", fields: [created_by], references: [id])
  created_at                     DateTime            @default(now())
  projet                         projet[]
  aides_territoires_perimeter_id String?

  @@schema("pfmv")
}

enum RoleCollectivite {
  ADMIN

  @@schema("pfmv")
}

enum RoleProjet {
  ADMIN
  EDITEUR
  LECTEUR

  @@schema("pfmv")
}

enum InvitationStatus {
  REQUESTED
  INVITED
  ACCEPTED
  DECLINED

  @@schema("pfmv")
}

model user_projet {
  id                 Int                       @id @default(autoincrement())
  email_address      String?
  role               RoleProjet
  projet_id          Int
  projet             projet                    @relation(fields: [projet_id], references: [id])
  user_id            String?
  user               User?                     @relation(name: "projet_access", fields: [user_id], references: [id])
  created_at         DateTime                  @default(now())
  invitation_token   String?                   @default(uuid())
  invitation_status  InvitationStatus
  deleted_at         DateTime?
  deleted_by         String?
  deleter            User?                     @relation(name: "user_projet_deleter", fields: [deleted_by], references: [id])
  email              email[]
  nb_views           Int?                      @default(0)
  last_viewed_at     DateTime?
  sourced_by_projets projet_sourcing_contact[] @relation("sourced_by_projets")

  @@unique([user_id, projet_id])
  @@schema("pfmv")
}

enum emailType {
  projetCreation
  projetInvitation
  projetRequestAccess
  projetAccessGranted
  projetAccessDeclined
  contactMessageSent
  welcomeMessage
  noActivityAfterSignup
  remindNotCompletedDiagnostic

  @@schema("pfmv")
}

enum emailStatus {
  PENDING
  ERROR
  SUCCESS

  @@schema("pfmv")
}

model email {
  id                  String       @id @default(cuid())
  destination_address String
  type                emailType
  sending_time        DateTime     @default(now())
  brevo_id            String?
  email_status        emailStatus
  user_projet_id      Int?
  user_projet         user_projet? @relation(fields: [user_projet_id], references: [id])
  user                User?        @relation(fields: [user_id], references: [id])
  user_id             String?
  extra               Json?

  @@schema("pfmv")
}

model user_collectivite {
  user_id         String
  collectivite_id Int
  verified        Boolean      @default(false)
  user            User         @relation(name: "collectivite_belonging", fields: [user_id], references: [id])
  collectivite    collectivite @relation(name: "users_in_collectivite", fields: [collectivite_id], references: [id])
  created_at      DateTime     @default(now())

  @@id(name: "userCollectiviteId", [user_id, collectivite_id])
  @@schema("pfmv")
}

model projet {
  id                        Int                       @id
  created_by                String
  creator                   User                      @relation(fields: [created_by], references: [id])
  created_at                DateTime                  @default(now())
  updated_at                DateTime?                 @updatedAt
  nom                       String
  type_espace               String?
  adresse                   String?
  niveau_maturite           String?
  adresse_info              Json?
  adresse_all_infos         Json?
  date_echeance             DateTime?
  fiches_solutions_id       Int[]
  fiches_diagnostic_id      Int[]
  estimations               estimation[]
  collectiviteId            Int
  collectivite              collectivite              @relation(fields: [collectiviteId], references: [id])
  recommandations_viewed_by String[]
  deleted_at                DateTime?
  deleted_by                String?
  deleter                   User?                     @relation(name: "projet_deleter", fields: [deleted_by], references: [id])
  users                     user_projet[]
  is_public                 Boolean?
  budget                    Int?
  sourcing_rex              Json?
  sourcing_user_projets     projet_sourcing_contact[] @relation("sourcing_projet")
  fiches                    projet_fiche[]
  diagnostic_simulations    diagnostic_simulation[]

  @@schema("pfmv")
}

enum FicheType {
  DIAGNOSTIC
  SOLUTION

  @@schema("pfmv")
}

model projet_fiche {
  id         Int       @id @default(autoincrement())
  projet_id  Int
  fiche_id   Int
  type       FicheType
  projet     projet    @relation(fields: [projet_id], references: [id])
  created_at DateTime  @default(now())
  user_id    String
  created_by User      @relation(fields: [user_id], references: [id])

  @@unique([projet_id, fiche_id, type])
  @@schema("pfmv")
}

model projet_sourcing_contact {
  id                     Int         @id @default(autoincrement())
  projet                 projet      @relation("sourcing_projet", fields: [projet_id], references: [id])
  projet_id              Int
  sourced_user_projet    user_projet @relation("sourced_by_projets", fields: [sourced_user_projet_id], references: [id])
  sourced_user_projet_id Int
  created_at             DateTime    @default(now())
  created_by             String
  creator                User        @relation(fields: [created_by], references: [id])

  @@unique([projet_id, sourced_user_projet_id])
  @@schema("pfmv")
}

model estimation {
  id                  Int                 @id
  created_by          String
  creator             User                @relation(name: "estimation_creator", fields: [created_by], references: [id])
  created_at          DateTime            @default(now())
  updated_at          DateTime            @default(now())
  projet_id           Int
  projet              projet              @relation(fields: [projet_id], references: [id], onDelete: Cascade)
  fiches_solutions_id Int[]
  materiaux           Json?
  deleted_at          DateTime?
  deleted_by          String?
  deleter             User?               @relation(name: "estimation_deleter", fields: [deleted_by], references: [id])
  estimations_aides   estimations_aides[]

  @@schema("pfmv")
}

enum TypeLieuClimadiag {
  commune
  epci

  @@schema("pfmv")
}

model climadiag {
  id                          Int               @id @default(autoincrement())
  nom                         String
  type_lieu                   TypeLieuClimadiag
  code_insee                  String            @unique
  code_postal                 String
  epci_parent_id              Int?
  jours_tres_chauds_ref       Float?
  jours_tres_chauds_prevision Json
  nuits_chaudes_ref           Float?
  nuits_chaudes_prevision     Json
  jours_vdc_ref               Float?
  jours_vdc_prevision         Json
  population                  Int               @default(0)
  superficie                  Int               @default(0)
  couverture_lcz              Float             @default(0)
  adresse_all_infos           Json?

  @@index([code_insee])
  @@index([code_postal])
  @@index([nom])
  @@schema("pfmv")
}

model aide {
  id                  Int                 @id @default(autoincrement())
  aideTerritoireId    Int                 @unique
  submission_deadline DateTime?           @db.Date
  type                String
  name                String?
  financers           String[]
  estimations_aides   estimations_aides[]

  @@schema("pfmv")
}

model estimations_aides {
  id           Int        @default(autoincrement())
  estimation   estimation @relation(fields: [estimationId], references: [id])
  estimationId Int
  aide         aide       @relation(fields: [aideId], references: [id])
  aideId       Int
  created_at   DateTime?  @default(now())
  user_id      String?
  created_by   User?      @relation(fields: [user_id], references: [id])

  @@id([estimationId, aideId])
  @@schema("pfmv")
}

model conversation {
  id         String   @id @default(cuid())
  userId     String?
  ragtimeId  String   @unique
  created_at DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@schema("pfmv")
}

model diagnostic_simulation {
  id             String   @id @default(cuid())
  user_id        String?
  projet_id      Int
  projet         projet   @relation(fields: [projet_id], references: [id], onDelete: Cascade)
  initial_values Json?
  validated      Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           User?    @relation(fields: [user_id], references: [id])

  @@schema("pfmv")
}

enum ReferenceType {
  USER
  PROJET
  ESTIMATION

  @@schema("pfmv")
}

enum EventType {
  UPDATE_MATURITE
  UPDATE_PROJET_SET_VISIBLE
  UPDATE_PROJET_SET_INVISIBLE

  @@schema("pfmv")
}

model Analytics {
  id             String        @id @default(cuid())
  created_at     DateTime      @default(now())
  created_by     User          @relation(fields: [user_id], references: [id])
  reference_id   Int
  reference_type ReferenceType
  event_type     EventType
  context        Json?
  user_id        String

  @@schema("pfmv")
}

enum JobType {
  SYNC_HUBSPOT
  CSM_MAIL_BATCH
  SYNC_CONNECT

  @@schema("pfmv")
}

model cron_jobs {
  id                   String   @id @default(cuid())
  execution_start_time DateTime @default(now())
  execution_end_time   DateTime
  job_type             JobType

  @@schema("pfmv")
}

model collectivite_prospect {
  code_insee          String   @id
  nom_collectivite    String
  nom_accompagnement  String
  code_postal         String
  date_accompagnement DateTime
  latitude            Float
  longitude           Float

  @@schema("data-deploiement")
}
