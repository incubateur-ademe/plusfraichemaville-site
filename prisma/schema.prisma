generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  agentconnect_info Json?

  nom                         String?
  prenom                      String?
  poste                       String?
  created_at                  DateTime            @default(now())
  collectivites_created       collectivite[]      @relation(name: "collectivite_creator")
  projets_created             projet[]
  estimations_created         estimation[]        @relation(name: "estimation_creator")
  estimations_deleted         estimation[]        @relation(name: "estimation_deleter")
  projets_deleted             projet[]            @relation(name: "projet_deleter")
  collectivites               user_collectivite[] @relation(name: "collectivite_belonging")
  selection_fiches_solutions  Json                @default("[]")
  selection_fiches_diagnostic Int[]               @default([])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model collectivite {
  id           Int                 @id
  nom          String
  code_insee   String?             @unique
  code_postal  String?
  adresse_info Json?
  ban_id       String?             @unique
  latitude     Float?
  longitude    Float?
  users        user_collectivite[] @relation(name: "users_in_collectivite")
  created_by   String
  creator      User                @relation(name: "collectivite_creator", fields: [created_by], references: [id])
  created_at   DateTime            @default(now())
  projet       projet[]
}

enum RoleCollectivite {
  ADMIN
}

model user_collectivite {
  user_id         String
  collectivite_id Int
  verified        Boolean      @default(false)
  user            User         @relation(name: "collectivite_belonging", fields: [user_id], references: [id])
  collectivite    collectivite @relation(name: "users_in_collectivite", fields: [collectivite_id], references: [id])
  created_at      DateTime     @default(now())

  @@id(name: "userCollectiviteId", [user_id, collectivite_id])
}

model projet {
  id                        Int          @id
  created_by                String
  creator                   User         @relation(fields: [created_by], references: [id])
  created_at                DateTime     @default(now())
  nom                       String
  type_espace               String?
  adresse                   String?
  niveau_maturite           String?
  adresse_info              Json?
  date_echeance             DateTime?
  fiches_solutions_id       Int[]
  fiches_diagnostic_id      Int[]
  estimations               estimation[]
  collectiviteId            Int
  collectivite              collectivite @relation(fields: [collectiviteId], references: [id])
  recommandations_viewed_by String[]
  deleted_at                DateTime?
  deleted_by                String?
  deleter                   User?        @relation(name: "projet_deleter", fields: [deleted_by], references: [id])
}

model estimation {
  id                  Int       @id
  created_by          String
  creator             User      @relation(name: "estimation_creator", fields: [created_by], references: [id])
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  projet_id           Int
  projet              projet    @relation(fields: [projet_id], references: [id], onDelete: Cascade)
  fiches_solutions_id Int[]
  materiaux           Json?
  deleted_at          DateTime?
  deleted_by          String?
  deleter             User?     @relation(name: "estimation_deleter", fields: [deleted_by], references: [id])
}

enum TypeLieuClimadiag {
  commune
  epci
}

model climadiag {
  id                          Int               @id @default(autoincrement())
  nom                         String
  type_lieu                   TypeLieuClimadiag
  code_insee                  String
  code_postal                 String
  epci_parent_id              Int?
  jours_tres_chauds_ref       Float
  jours_tres_chauds_prevision Json
  nuits_chaudes_ref           Float
  nuits_chaudes_prevision     Json
  jours_vdc_ref               Float
  jours_vdc_prevision         Json
}
